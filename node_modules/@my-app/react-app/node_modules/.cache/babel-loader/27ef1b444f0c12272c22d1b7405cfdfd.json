{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\n\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n\n  var _usePromiseTransactio = usePromiseTransaction(transactionChainId, options),\n      promiseTransaction = _usePromiseTransactio.promiseTransaction,\n      state = _usePromiseTransactio.state,\n      resetState = _usePromiseTransactio.resetState;\n\n  var config = useConfig();\n  var gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  var providers = useReadonlyNetworks();\n  var provider = transactionChainId && providers[transactionChainId];\n\n  var sendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionRequest) {\n      var signer, gasLimit;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              signer = getSignerFromOptions(provider, options, library);\n\n              if (!signer) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n\n            case 4:\n              gasLimit = _context.sent;\n              return _context.abrupt(\"return\", promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), {\n                gasLimit: gasLimit\n              }))));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendTransaction(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    sendTransaction: sendTransaction,\n    state: state,\n    resetState: resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useSendTransaction.ts"],"names":[],"mappings":";;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,2BAAT,EAAsC,qBAAtC,QAAmE,yBAAnE;AACA,SAAS,mBAAT,QAAoC,+CAApC;AAEA,SAAS,oBAAT,QAAqC,iCAArC;AAGA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AACH,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAAyD;;;EAC7D,iBAA6B,SAAS,EAAtC;EAAA,IAAQ,OAAR,cAAQ,OAAR;EAAA,IAAiB,OAAjB,cAAiB,OAAjB;;EACA,IAAM,kBAAkB,GAAI,OAAO,IAAI,aAAa,OAAxB,KAAmC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,OAA5C,CAAD,IAAyD,OAApF;;EACA,4BAAkD,qBAAqB,CAAC,kBAAD,EAAqB,OAArB,CAAvE;EAAA,IAAQ,kBAAR,yBAAQ,kBAAR;EAAA,IAA4B,KAA5B,yBAA4B,KAA5B;EAAA,IAAmC,UAAnC,yBAAmC,UAAnC;;EAEA,IAAM,MAAM,GAAG,SAAS,EAAxB;EACA,IAAM,wBAAwB,GAC5B,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,wBAAT,MAAiC,IAAjC,IAAiC,EAAA,KAAA,KAAA,CAAjC,GAAiC,EAAjC,GAAqC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,wBAA9C,MAAsE,IAAtE,IAAsE,EAAA,KAAA,KAAA,CAAtE,GAAsE,EAAtE,GAA0E,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,wBAAlF,MAA0G,IAA1G,IAA0G,EAAA,KAAA,KAAA,CAA1G,GAA0G,EAA1G,GAA8G,CADhH;EAGA,IAAM,SAAS,GAAG,mBAAmB,EAArC;EACA,IAAM,QAAQ,GAAI,kBAAkB,IAAI,SAAS,CAAC,kBAAD,CAAjD;;EAEA,IAAM,eAAe;IAAA,sEAAG,iBAAO,kBAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cAChB,MADgB,GACP,oBAAoB,CAAC,QAAD,EAAqC,OAArC,EAA8C,OAA9C,CADb;;cAAA,KAGlB,MAHkB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAIG,2BAA2B,CAAC,kBAAD,EAAqB,MAArB,EAA6B,wBAA7B,CAJ9B;;YAAA;cAId,QAJc;cAAA,iCAMb,kBAAkB,CACvB,MAAM,CAAC,eAAP,CAAsB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjB,kBADiB,CAAA,EACC;gBACrB,QAAQ,EAAR;cADqB,CADD,CAAtB,CADuB,CANL;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAf,eAAe;MAAA;IAAA;EAAA,GAArB;;EAeA,OAAO;IAAE,eAAe,EAAf,eAAF;IAAmB,KAAK,EAAL,KAAnB;IAA0B,UAAU,EAAV;EAA1B,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n    var _a, _b, _c;\n    const { library, chainId } = useEthers();\n    const transactionChainId = (options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId)) || chainId;\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);\n    const config = useConfig();\n    const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n    const providers = useReadonlyNetworks();\n    const provider = (transactionChainId && providers[transactionChainId]);\n    const sendTransaction = async (transactionRequest) => {\n        const signer = getSignerFromOptions(provider, options, library);\n        if (signer) {\n            const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n            return promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), { gasLimit })));\n        }\n    };\n    return { sendTransaction, state, resetState };\n}\n//# sourceMappingURL=useSendTransaction.js.map"]},"metadata":{},"sourceType":"module"}