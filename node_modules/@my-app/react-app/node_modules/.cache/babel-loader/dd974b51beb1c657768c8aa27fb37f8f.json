{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n\n  var timeFromCreation = function timeFromCreation(creationTime) {\n    return Date.now() - creationTime;\n  };\n\n  return notifications.filter(function (notification) {\n    return timeFromCreation(notification.submittedAt) >= expirationPeriod;\n  });\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\n\n\nexport function useNotifications() {\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification,\n      notifications = _useNotificationsCont.notifications,\n      removeNotification = _useNotificationsCont.removeNotification;\n\n  var _useConfig = useConfig(),\n      _useConfig$notificati = _useConfig.notifications,\n      checkInterval = _useConfig$notificati.checkInterval,\n      expirationPeriod = _useConfig$notificati.expirationPeriod;\n\n  var chainNotifications = useMemo(function () {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(function () {\n    if (!chainId) {\n      return;\n    }\n\n    var expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    var _iterator = _createForOfIteratorHelper(expiredNotification),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var notification = _step.value;\n        removeNotification({\n          notificationId: notification.id,\n          chainId: chainId\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification: addNotification,\n    removeNotification: removeNotification\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useNotifications.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,OAAxB;AACA,SAAuB,uBAAvB,QAAsD,cAAtD;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,UAA1B;;AAEA,SAAS,uBAAT,CAAiC,aAAjC,EAAgE,gBAAhE,EAAwF;EACtF,IAAI,gBAAgB,KAAK,CAAzB,EAA4B;IAC1B,OAAO,EAAP;EACD;;EACD,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,YAAD;IAAA,OAA0B,IAAI,CAAC,GAAL,KAAa,YAAvC;EAAA,CAAzB;;EAEA,OAAO,aAAa,CAAC,MAAd,CAAqB,UAAC,YAAD;IAAA,OAAkB,gBAAgB,CAAC,YAAY,CAAC,WAAd,CAAhB,IAA8C,gBAAhE;EAAA,CAArB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDG;;;AACH,OAAM,SAAU,gBAAV,GAA0B;EAC9B,iBAA6B,SAAS,EAAtC;EAAA,IAAQ,OAAR,cAAQ,OAAR;EAAA,IAAiB,OAAjB,cAAiB,OAAjB;;EACA,4BAA+D,uBAAuB,EAAtF;EAAA,IAAQ,eAAR,yBAAQ,eAAR;EAAA,IAAyB,aAAzB,yBAAyB,aAAzB;EAAA,IAAwC,kBAAxC,yBAAwC,kBAAxC;;EACA,iBAEI,SAAS,EAFb;EAAA,uCACE,aADF;EAAA,IACmB,aADnB,yBACmB,aADnB;EAAA,IACkC,gBADlC,yBACkC,gBADlC;;EAIA,IAAM,kBAAkB,GAAG,OAAO,CAAC,YAAK;;;IACtC,IAAI,OAAO,KAAK,SAAZ,IAAyB,CAAC,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,CAAA,EAAA,GAAA,aAAa,CAAC,OAAD,CAAb,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,EAAjC;EACD,CALiC,EAK/B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CAL+B,CAAlC;EAOA,WAAW,CAAC,YAAK;IACf,IAAI,CAAC,OAAL,EAAc;MACZ;IACD;;IAED,IAAM,mBAAmB,GAAG,uBAAuB,CAAC,kBAAD,EAAqB,gBAArB,CAAnD;;IALe,2CAMY,mBANZ;IAAA;;IAAA;MAMf,oDAAgD;QAAA,IAArC,YAAqC;QAC9C,kBAAkB,CAAC;UAAE,cAAc,EAAE,YAAY,CAAC,EAA/B;UAAmC,OAAO,EAAP;QAAnC,CAAD,CAAlB;MACD;IARc;MAAA;IAAA;MAAA;IAAA;EAShB,CATU,EASR,aATQ,CAAX;EAWA,OAAO;IACL,aAAa,EAAE,kBADV;IAEL,eAAe,EAAf,eAFK;IAGL,kBAAkB,EAAlB;EAHK,CAAP;AAKD","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../hooks';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n    if (expirationPeriod === 0) {\n        return [];\n    }\n    const timeFromCreation = (creationTime) => Date.now() - creationTime;\n    return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n/**\n * ``useNotifications`` is a hook that is used to access notifications.\n * Notifications include information about: new transactions, transaction success or failure, as well as connection to a new wallet.\n *\n * To use this hook call:\n *\n * ```tsx\n *   const { notifications } = useNotifications()\n * ```\n *\n * `notifications` is an array of `NotificationPayload`.\n *\n * Each notification is removed from `notifications` after time declared in\n * `config.notifications.expirationPeriod`\n *\n * Each can be one of the following:\n *\n * ```tsx\n *   {\n *     type: 'walletConnected';\n *     address: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionStarted';\n *     submittedAt: number\n *     transaction: TransactionResponse;\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionSucceed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * ```tsx\n *   {\n *     type: 'transactionFailed'\n *     transaction: TransactionResponse\n *     originalTransaction?: TransactionResponse\n *     receipt: TransactionReceipt\n *     transactionName?: string\n *   }\n * ```\n *\n * @public\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n */\nexport function useNotifications() {\n    const { chainId, account } = useEthers();\n    const { addNotification, notifications, removeNotification } = useNotificationsContext();\n    const { notifications: { checkInterval, expirationPeriod }, } = useConfig();\n    const chainNotifications = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n    }, [notifications, chainId, account]);\n    useInterval(() => {\n        if (!chainId) {\n            return;\n        }\n        const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n        for (const notification of expiredNotification) {\n            removeNotification({ notificationId: notification.id, chainId });\n        }\n    }, checkInterval);\n    return {\n        notifications: chainNotifications,\n        addNotification,\n        removeNotification,\n    };\n}\n//# sourceMappingURL=useNotifications.js.map"]},"metadata":{},"sourceType":"module"}