{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\n\nexport var multicall1Factory = function multicall1Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall : multicall;\n};\n/**\n * @public\n */\n\nexport function multicall(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n/**\n * @public\n */\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, _yield$contract$aggre, _yield$contract$aggre2, results;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.aggregate(requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            _yield$contract$aggre = _context.sent;\n            _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n            results = _yield$contract$aggre2[1];\n            return _context.abrupt(\"return\", decodeResult(results, requests));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}\n\nexport function fastEncodingMulticall(_x5, _x6, _x7, _x8) {\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction _fastEncodingMulticall() {\n  _fastEncodingMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeAggregate, _decodeAggregate2, results;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {});\n\n          case 2:\n            _context2.next = 4;\n            return provider.call({\n              to: address,\n              data: encodeAggregate(requests.map(function (_ref2) {\n                var address = _ref2.address,\n                    data = _ref2.data;\n                return [address, data];\n              }))\n            }, blockNumber);\n\n          case 4:\n            response = _context2.sent;\n            _decodeAggregate = decodeAggregate(response), _decodeAggregate2 = _slicedToArray(_decodeAggregate, 2), results = _decodeAggregate2[1];\n            return _context2.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  var state = {};\n\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n        address = _requests$i.address,\n        data = _requests$i.data;\n    var result = results[i];\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall.ts"],"names":[],"mappings":";;;AACA,SAAS,QAAT,QAAyB,QAAzB;AAEA,SAAS,eAAT,EAA0B,eAA1B,QAAiD,wBAAjD;AAIA,IAAM,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA;;AAEG;;AACH,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,YAAD;EAAA,OAA4B,YAAY,GAAG,qBAAH,GAA2B,SAAnE;AAAA,CAA1B;AAEP;;AAEG;;AACH,gBAAsB,SAAtB;EAAA;AAAA;AAiBA;;AAEG;;;0EAnBI,iBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,iCAOI,EAPJ;;UAAA;YASC,QATD,GASY,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CATZ;YAAA;YAAA,OAU4C,QAAQ,CAAC,SAAT,CAC/C,QAAQ,CAAC,GAAT,CAAa;cAAA,IAAG,OAAH,QAAG,OAAH;cAAA,IAAY,IAAZ,QAAY,IAAZ;cAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;YAAA,CAAb,CAD+C,EAE/C;cAAE,QAAQ,EAAE;YAAZ,CAF+C,CAV5C;;UAAA;YAAA;YAAA;YAUI,OAVJ;YAAA,iCAcE,YAAY,CAAC,OAAD,EAAU,QAAV,CAdd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAoBP,gBAAsB,qBAAtB;EAAA;AAAA;;;sFAAO,kBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,kCAOI,EAPJ;;UAAA;YAAA;YAAA,OASkB,QAAQ,CAAC,IAAT,CACrB;cACE,EAAE,EAAE,OADN;cAEE,IAAI,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAT,CAAa;gBAAA,IAAG,OAAH,SAAG,OAAH;gBAAA,IAAY,IAAZ,SAAY,IAAZ;gBAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;cAAA,CAAb,CAAD;YAFvB,CADqB,EAKrB,WALqB,CATlB;;UAAA;YASC,QATD;YAAA,mBAgBe,eAAe,CAAC,QAAD,CAhB9B,2DAgBI,OAhBJ;YAAA,kCAiBE,YAAY,CAAC,OAAD,EAAU,QAAV,CAjBd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAoBP,SAAS,YAAT,CAAsB,OAAtB,EAAyC,QAAzC,EAA4D;;;EAC1D,IAAM,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,kBAA0B,QAAQ,CAAC,CAAD,CAAlC;IAAA,IAAQ,OAAR,eAAQ,OAAR;IAAA,IAAiB,IAAjB,eAAiB,IAAjB;IACA,IAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;IACA,IAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAD,CAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EAA1C;IACA,eAAe,CAAC,IAAD,CAAf,GAAwB;MAAE,KAAK,EAAE,MAAT;MAAiB,OAAO,EAAE;IAA1B,CAAxB;IACA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;EACD;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall : multicall);\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [, results] = decodeAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { value: result, success: true };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}