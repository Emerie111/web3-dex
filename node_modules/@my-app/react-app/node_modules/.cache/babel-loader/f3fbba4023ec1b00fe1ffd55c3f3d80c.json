{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\nimport { WindowProvider } from './window';\n/**\n * Provides basic services for a DApp.\n * @public\n */\n\nexport function DAppProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\n\nvar getMulticallAddresses = function getMulticallAddresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    return result[network.chainId] = network.multicallAddress;\n  });\n  return result;\n};\n\nvar getMulticall2Addresses = function getMulticall2Addresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  var children = _ref2.children;\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses,\n      networks = _useConfig.networks,\n      multicallVersion = _useConfig.multicallVersion;\n\n  var defaultAddresses = useMemo(function () {\n    return multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks);\n  }, [networks, multicallVersion]);\n  var multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(WindowProvider, {\n    children: _jsx(ReadonlyNetworksProvider, {\n      children: _jsx(NetworkProvider, {\n        children: _jsx(BlockNumberProvider, {\n          children: _jsx(BlockNumbersProvider, {\n            children: _jsx(LocalMulticallProvider, {\n              children: _jsx(MultiChainStateProvider, Object.assign({\n                multicallAddresses: multicallAddressesMerged\n              }, {\n                children: _jsx(NotificationsProvider, {\n                  children: _jsx(TransactionProvider, {\n                    children: children\n                  })\n                })\n              }))\n            })\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"sources":["../../../../src/providers/DAppProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\nimport { WindowProvider } from './window';\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({ config, children }) {\n    return (_jsx(ConfigProvider, Object.assign({ config: config }, { children: _jsx(DAppProviderWithConfig, { children: children }) })));\n}\nconst getMulticallAddresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => (result[network.chainId] = network.multicallAddress));\n    return result;\n};\nconst getMulticall2Addresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => {\n        if (network.multicall2Address) {\n            result[network.chainId] = network.multicall2Address;\n        }\n    });\n    return result;\n};\nfunction DAppProviderWithConfig({ children }) {\n    const { multicallAddresses, networks, multicallVersion } = useConfig();\n    const defaultAddresses = useMemo(() => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)), [networks, multicallVersion]);\n    const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n    return (_jsx(WindowProvider, { children: _jsx(ReadonlyNetworksProvider, { children: _jsx(NetworkProvider, { children: _jsx(BlockNumberProvider, { children: _jsx(BlockNumbersProvider, { children: _jsx(LocalMulticallProvider, { children: _jsx(MultiChainStateProvider, Object.assign({ multicallAddresses: multicallAddressesMerged }, { children: _jsx(NotificationsProvider, { children: _jsx(TransactionProvider, { children: children }) }) })) }) }) }) }) }) }));\n}\n//# sourceMappingURL=DAppProvider.js.map"]},"metadata":{},"sourceType":"module"}