{"ast":null,"code":"import _defineProperty from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a, _b, _c;\n\n  var current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      var newState = action.state; // merge with existing state\n\n      var oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n      for (var _i = 0, _Object$entries = Object.entries(oldState); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            address = _Object$entries$_i[0],\n            entries = _Object$entries$_i[1];\n\n        newState = Object.assign(Object.assign({}, newState), _defineProperty({}, address, Object.assign(Object.assign({}, entries), newState[address])));\n      }\n\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, {\n        blockNumber: action.blockNumber,\n        state: newState\n      }));\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, Object.assign(Object.assign({}, state[action.chainId]), {\n        blockNumber: action.blockNumber,\n        error: action.error\n      })));\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/chainStateReducer.ts"],"names":[],"mappings":";;;AAkCA;;AAEG;AACH,OAAM,SAAU,iBAAV,GAAuE;EAAA,IAA3C,KAA2C,uEAA5B,EAA4B;EAAA,IAAxB,MAAwB;;;;EAC3E,IAAM,OAAO,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAR,CAAL,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,WAAvC;;EACA,IAAI,CAAC,OAAD,IAAY,MAAM,CAAC,WAAP,IAAsB,OAAtC,EAA+C;IAC7C,IAAI,MAAM,CAAC,IAAP,KAAgB,eAApB,EAAqC;MACnC,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAtB,CADmC,CAEnC;;MACA,IAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAR,CAAL,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,KAAvB,MAA4B,IAA5B,IAA4B,EAAA,KAAA,KAAA,CAA5B,GAA4B,EAA5B,GAAgC,EAAjD;;MACA,mCAAiC,MAAM,CAAC,OAAP,CAAe,QAAf,CAAjC,qCAA2D;QAAtD;QAAA,IAAO,OAAP;QAAA,IAAgB,OAAhB;;QACH,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,QADG,CAAA,sBAEL,OAFK,EAEG,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,OADI,CAAA,EAEJ,QAAQ,CAAC,OAAD,CAFJ,CAFH,EAAR;MAOD;;MACD,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,sBAEG,MAAM,CAAC,OAFV,EAEoB;QAAE,WAAW,EAAE,MAAM,CAAC,WAAtB;QAAmC,KAAK,EAAE;MAA1C,CAFpB,EAAA;IAID,CAjBD,MAiBO,IAAI,MAAM,CAAC,IAAP,KAAgB,aAApB,EAAmC;MACxC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,sBAEG,MAAM,CAAC,OAFV,EAEkB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAR,CAAZ,CAAA,EAA4B;QAAE,WAAW,EAAE,MAAM,CAAC,WAAtB;QAAmC,KAAK,EAAE,MAAM,CAAC;MAAjD,CAA5B,CAFlB,EAAA;IAID;EACF;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            // merge with existing state\n            const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n            for (const [address, entries] of Object.entries(oldState)) {\n                newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}