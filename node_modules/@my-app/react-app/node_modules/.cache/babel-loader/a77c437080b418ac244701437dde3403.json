{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nvar GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport function getInjectedProvider(_x) {\n  return _getInjectedProvider.apply(this, arguments);\n}\n\nfunction _getInjectedProvider() {\n  _getInjectedProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(getPollingInterval) {\n    var _a, injectedProviders, injectedProvider, provider, chainId;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (window.ethereum) {\n              _context.next = 3;\n              break;\n            }\n\n            window.open(GET_METAMASK_LINK);\n            return _context.abrupt(\"return\", undefined);\n\n          case 3:\n            injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n\n            if (!((_a = injectedProviders.find(function (provider) {\n              var _a;\n\n              return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n            })) !== null && _a !== void 0)) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.t0 = _a;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return detectEthereumProvider();\n\n          case 10:\n            _context.t0 = _context.sent;\n\n          case 11:\n            injectedProvider = _context.t0;\n\n            if (injectedProvider) {\n              _context.next = 15;\n              break;\n            }\n\n            window.open(GET_METAMASK_LINK);\n            return _context.abrupt(\"return\", undefined);\n\n          case 15:\n            provider = new providers.Web3Provider(injectedProvider, 'any');\n            _context.next = 18;\n            return provider.send('eth_chainId', []);\n\n          case 18:\n            chainId = _context.sent;\n\n            if (!isWebSocketProvider(provider)) {\n              provider.pollingInterval = getPollingInterval(chainId);\n            }\n\n            return _context.abrupt(\"return\", provider);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getInjectedProvider.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/helpers/injectedProvider.ts"],"names":[],"mappings":";;AAAA,OAAO,sBAAP,MAAmC,2BAAnC;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,IAAM,iBAAiB,GAAG,mCAA1B;AAEA,gBAAsB,mBAAtB;EAAA;AAAA;;;oFAAO,iBAAmC,kBAAnC;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,IACA,MAAM,CAAC,QADP;cAAA;cAAA;YAAA;;YAEH,MAAM,CAAC,IAAP,CAAY,iBAAZ;YAFG,iCAGI,SAHJ;;UAAA;YAMC,iBAND,GAM4B,CAAC,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,QAAT,EAA0B,SAA1B,IAAuC,EANnE;;YAAA,MAQH,CAAA,EAAA,GAAA,iBAAiB,CAAC,IAAlB,CAAuB,UAAC,QAAD,EAAa;;;cAClC,OAAO,CAAA,EAAA,GAAA,QAAQ,CAAC,UAAT,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB,KAA9B;YACD,CAFD,CAAA,MAEE,IAFF,IAEE,EAAA,KAAA,KAAA,CAVC;cAAA;cAAA;YAAA;;YAAA,cAUD,EAVC;YAAA;YAAA;;UAAA;YAAA;YAAA,OAUU,sBAAsB,EAVhC;;UAAA;YAAA;;UAAA;YAOC,gBAPD;;YAAA,IAYA,gBAZA;cAAA;cAAA;YAAA;;YAaH,MAAM,CAAC,IAAP,CAAY,iBAAZ;YAbG,iCAcI,SAdJ;;UAAA;YAiBC,QAjBD,GAiBY,IAAI,SAAS,CAAC,YAAd,CAA2B,gBAA3B,EAA6C,KAA7C,CAjBZ;YAAA;YAAA,OAkBiB,QAAQ,CAAC,IAAT,CAAc,aAAd,EAA6B,EAA7B,CAlBjB;;UAAA;YAkBC,OAlBD;;YAmBL,IAAI,CAAC,mBAAmB,CAAC,QAAD,CAAxB,EAAoC;cAClC,QAAQ,CAAC,eAAT,GAA2B,kBAAkB,CAAC,OAAD,CAA7C;YACD;;YArBI,iCAsBE,QAtBF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","sourceRoot":"","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n    var _a;\n    if (!window.ethereum) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n    const injectedProvider = (_a = injectedProviders.find((provider) => {\n        var _a;\n        return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n    })) !== null && _a !== void 0 ? _a : (await detectEthereumProvider());\n    if (!injectedProvider) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const provider = new providers.Web3Provider(injectedProvider, 'any');\n    const chainId = await provider.send('eth_chainId', []);\n    if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(chainId);\n    }\n    return provider;\n}\n//# sourceMappingURL=injectedProvider.js.map"]},"metadata":{},"sourceType":"module"}