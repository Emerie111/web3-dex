{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\n\nexport function useEthers() {\n  var _useNetwork = useNetwork(),\n      _useNetwork$network = _useNetwork.network,\n      networkProvider = _useNetwork$network.provider,\n      chainId = _useNetwork$network.chainId,\n      accounts = _useNetwork$network.accounts,\n      errors = _useNetwork$network.errors,\n      deactivate = _useNetwork.deactivate,\n      _activate = _useNetwork.activate,\n      activateBrowserWallet = _useNetwork.activateBrowserWallet,\n      isLoading = _useNetwork.isLoading;\n\n  var _useConfig = useConfig(),\n      networks = _useConfig.networks,\n      readOnlyUrls = _useConfig.readOnlyUrls;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var configuredChainIds = Object.keys(readOnlyUrls || {}).map(function (chainId) {\n    return parseInt(chainId, 10);\n  });\n  var supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(function (network) {\n    return network.chainId;\n  });\n  useEffect(function () {\n    var isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n    var isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n\n    if (isUnsupportedChainId || isNotConfiguredChainId) {\n      var chainIdError = new Error(\"\".concat(isUnsupportedChainId ? 'Unsupported' : 'Not configured', \" chain id: \").concat(chainId, \".\"));\n      chainIdError.name = 'ChainIdError';\n      setError(chainIdError);\n      return;\n    }\n\n    setError(errors[errors.length - 1]);\n  }, [chainId, errors]);\n  var readonlyNetwork = useReadonlyNetwork();\n  var provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n\n  var switchNetwork = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(chainId) {\n      var errChainNotAddedYet, chain;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              validateArguments({\n                chainId: chainId\n              }, {\n                chainId: 'number'\n              });\n\n              if (provider) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Provider not connected.');\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return provider.send('wallet_switchEthereumChain', [{\n                chainId: \"0x\".concat(chainId.toString(16))\n              }]);\n\n            case 6:\n              _context.next = 19;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              errChainNotAddedYet = 4902; // Metamask error code\n\n              if (!(_context.t0.code === errChainNotAddedYet)) {\n                _context.next = 18;\n                break;\n              }\n\n              chain = networks === null || networks === void 0 ? void 0 : networks.find(function (chain) {\n                return chain.chainId === chainId;\n              });\n\n              if (!(chain === null || chain === void 0 ? void 0 : chain.rpcUrl)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n\n            case 16:\n              _context.next = 19;\n              break;\n\n            case 18:\n              throw _context.t0;\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 8]]);\n    }));\n\n    return function switchNetwork(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account: account,\n    active: !!provider,\n    activate: function () {\n      var _activate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(providerOrConnector) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!('getProvider' in providerOrConnector)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                _context2.next = 4;\n                return providerOrConnector.activate();\n\n              case 4:\n                _context2.t0 = _activate;\n                _context2.next = 7;\n                return providerOrConnector.getProvider();\n\n              case 7:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t1));\n\n              case 9:\n                return _context2.abrupt(\"return\", _activate(providerOrConnector));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function activate(_x2) {\n        return _activate2.apply(this, arguments);\n      }\n\n      return activate;\n    }(),\n    activateBrowserWallet: activateBrowserWallet,\n    deactivate: deactivate,\n    setError: function setError() {\n      throw new Error('setError is deprecated');\n    },\n    error: error,\n    isLoading: isLoading,\n    switchNetwork: switchNetwork\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n    const { network: { provider: networkProvider, chainId, accounts, errors }, deactivate, activate, activateBrowserWallet, isLoading, } = useNetwork();\n    const { networks, readOnlyUrls } = useConfig();\n    const [error, setError] = useState(undefined);\n    const configuredChainIds = Object.keys(readOnlyUrls || {}).map((chainId) => parseInt(chainId, 10));\n    const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);\n    useEffect(() => {\n        const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n        const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n        if (isUnsupportedChainId || isNotConfiguredChainId) {\n            const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n            chainIdError.name = 'ChainIdError';\n            setError(chainIdError);\n            return;\n        }\n        setError(errors[errors.length - 1]);\n    }, [chainId, errors]);\n    const readonlyNetwork = useReadonlyNetwork();\n    const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n    const switchNetwork = async (chainId) => {\n        validateArguments({ chainId }, { chainId: 'number' });\n        if (!provider) {\n            throw new Error('Provider not connected.');\n        }\n        try {\n            await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }]);\n        }\n        catch (error) {\n            const errChainNotAddedYet = 4902; // Metamask error code\n            if (error.code === errChainNotAddedYet) {\n                const chain = networks === null || networks === void 0 ? void 0 : networks.find((chain) => chain.chainId === chainId);\n                if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n                    await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n    };\n    const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n    return {\n        connector: undefined,\n        library: provider,\n        chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n        account,\n        active: !!provider,\n        activate: async (providerOrConnector) => {\n            if ('getProvider' in providerOrConnector) {\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                await providerOrConnector.activate();\n                return activate(await providerOrConnector.getProvider());\n            }\n            return activate(providerOrConnector);\n        },\n        activateBrowserWallet,\n        deactivate,\n        setError: () => {\n            throw new Error('setError is deprecated');\n        },\n        error,\n        isLoading,\n        switchNetwork,\n    };\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}