{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\n\nexport var useResolveName = function useResolveName(name) {\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      address = _useState6[0],\n      setAddress = _useState6[1];\n\n  useEffect(function () {\n    var mounted = true;\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var resolved;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!library || !name)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.prev = 2;\n              setIsLoading(true);\n              _context.next = 6;\n              return library.resolveName(name);\n\n            case 6:\n              resolved = _context.sent;\n\n              if (mounted) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 9:\n              setAddress(resolved);\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (mounted) {\n                _context.next = 16;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 16:\n              setError(_context.t0);\n\n            case 17:\n              _context.prev = 17;\n              setIsLoading(false);\n              return _context.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12, 17, 20]]);\n    }))();\n    return function () {\n      mounted = false;\n    };\n  }, [library, name]);\n  return {\n    address: address,\n    isLoading: isLoading,\n    error: error\n  };\n};","map":{"version":3,"sources":["../../../../src/hooks/useResolveName.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;AAQG;;AACH,OAAO,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,IAAD,EAA6B;EACzD,iBAAoB,SAAS,EAA7B;EAAA,IAAQ,OAAR,cAAQ,OAAR;;EACA,gBAAkC,QAAQ,CAAC,KAAD,CAA1C;EAAA;EAAA,IAAO,SAAP;EAAA,IAAkB,YAAlB;;EACA,iBAA0B,QAAQ,CAAe,IAAf,CAAlC;EAAA;EAAA,IAAO,KAAP;EAAA,IAAc,QAAd;;EACA,iBAA8B,QAAQ,EAAtC;EAAA;EAAA,IAAO,OAAP;EAAA,IAAgB,UAAhB;;EAEA,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,GAAG,IAAd;IAEA,KAAK,2DAAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MACA,CAAC,OAAD,IAAY,CAAC,IADb;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;cAGF,YAAY,CAAC,IAAD,CAAZ;cAHE;cAAA,OAIqB,OAAO,CAAC,WAAR,CAAoB,IAApB,CAJrB;;YAAA;cAII,QAJJ;;cAAA,IAKG,OALH;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAMF,UAAU,CAAC,QAAD,CAAV;cANE;cAAA;;YAAA;cAAA;cAAA;;cAAA,IAQG,OARH;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cASF,QAAQ,aAAR;;YATE;cAAA;cAWF,YAAY,CAAC,KAAD,CAAZ;cAXE;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD,IAAL;IAeA,OAAO,YAAK;MACV,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CArBQ,EAqBN,CAAC,OAAD,EAAU,IAAV,CArBM,CAAT;EAuBA,OAAO;IAAE,OAAO,EAAP,OAAF;IAAW,SAAS,EAAT,SAAX;IAAsB,KAAK,EAAL;EAAtB,CAAP;AACD,CA9BM","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useResolveName` is a hook that is used to resolve an ENS name (e.g. `name.eth`) to a specific address.\n * @param name ENS name to be resolved\n * @returns {} Object with the following:\n  - `address: string | null | undefined` - resolved address for the given ENS name or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n */\nexport const useResolveName = (name) => {\n    const { library } = useEthers();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [address, setAddress] = useState();\n    useEffect(() => {\n        let mounted = true;\n        void (async () => {\n            if (!library || !name)\n                return;\n            try {\n                setIsLoading(true);\n                const resolved = await library.resolveName(name);\n                if (!mounted)\n                    return;\n                setAddress(resolved);\n            }\n            catch (e) {\n                if (!mounted)\n                    return;\n                setError(e);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, [library, name]);\n    return { address, isLoading, error };\n};\n//# sourceMappingURL=useResolveName.js.map"]},"metadata":{},"sourceType":"module"}