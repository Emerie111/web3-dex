{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      notifications = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  useEffect(function () {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  var addNotification = useCallback(function (_ref2) {\n    var notification = _ref2.notification,\n        chainId = _ref2.chainId;\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      chainId: chainId,\n      notification: Object.assign(Object.assign({}, notification), {\n        id: nanoid()\n      })\n    });\n  }, [dispatch]);\n  var removeNotification = useCallback(function (_ref3) {\n    var notificationId = _ref3.notificationId,\n        chainId = _ref3.chainId;\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      chainId: chainId,\n      notificationId: notificationId\n    });\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification: addNotification,\n      notifications: notifications,\n      removeNotification: removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../src/providers/notifications/provider.tsx"],"names":[],"mappings":";;AAAA,SAAoB,WAApB,EAAiC,SAAjC,EAA4C,UAA5C,QAA8D,OAA9D;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,oBAAT,QAAqC,WAArC;AACA,SAAiC,qBAAjC,QAAyF,SAAzF;AACA,SAAS,mBAAT,QAAoC,WAApC;AACA,SAAS,MAAT,QAAuB,QAAvB;AAMA,OAAM,SAAU,qBAAV,OAAmD;EAAA,IAAjB,QAAiB,QAAjB,QAAiB;;EACvD,kBAAkC,UAAU,CAAC,mBAAD,EAAsB,qBAAtB,CAA5C;EAAA;EAAA,IAAO,aAAP;EAAA,IAAsB,QAAtB;;EACA,iBAA6B,SAAS,EAAtC;EAAA,IAAQ,OAAR,cAAQ,OAAR;EAAA,IAAiB,OAAjB,cAAiB,OAAjB;;EAEA,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,IAAI,OAAf,EAAwB;MACtB,QAAQ,CAAC;QACP,IAAI,EAAE,kBADC;QAEP,OAAO,EAAE,OAFF;QAGP,YAAY,EAAE;UACZ,IAAI,EAAE,iBADM;UAEZ,EAAE,EAAE,MAAM,EAFE;UAGZ,WAAW,EAAE,IAAI,CAAC,GAAL,EAHD;UAIZ,OAAO,EAAE;QAJG;MAHP,CAAD,CAAR;IAUD;EACF,CAbQ,EAaN,CAAC,OAAD,EAAU,OAAV,CAbM,CAAT;EAeA,IAAM,eAAe,GAAG,WAAW,CACjC,iBAAsD;IAAA,IAAnD,YAAmD,SAAnD,YAAmD;IAAA,IAArC,OAAqC,SAArC,OAAqC;IACpD,QAAQ,CAAC;MACP,IAAI,EAAE,kBADC;MAEP,OAAO,EAAP,OAFO;MAGP,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,YAAP,CAAA,EAAmB;QAAE,EAAE,EAAE,MAAM;MAAZ,CAAnB;IAHL,CAAD,CAAR;EAKD,CAPgC,EAQjC,CAAC,QAAD,CARiC,CAAnC;EAWA,IAAM,kBAAkB,GAAG,WAAW,CACpC,iBAA2D;IAAA,IAAxD,cAAwD,SAAxD,cAAwD;IAAA,IAAxC,OAAwC,SAAxC,OAAwC;IACzD,QAAQ,CAAC;MACP,IAAI,EAAE,qBADC;MAEP,OAAO,EAAP,OAFO;MAGP,cAAc,EAAd;IAHO,CAAD,CAAR;EAKD,CAPmC,EAQpC,CAAC,QAAD,CARoC,CAAtC;EAWA,OACE,IAAA,CAAC,oBAAoB,CAAC,QAAtB,EAA8B;IAAC,KAAK,EAAE;MAAE,eAAe,EAAf,eAAF;MAAmB,aAAa,EAAb,aAAnB;MAAkC,kBAAkB,EAAlB;IAAlC,CAAR;IAAgE,QAAQ,EAAE;EAA1E,CAA9B,CADF;AAGD","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider({ children }) {\n    const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n    const { chainId, account } = useEthers();\n    useEffect(() => {\n        if (account && chainId) {\n            dispatch({\n                type: 'ADD_NOTIFICATION',\n                chainId: chainId,\n                notification: {\n                    type: 'walletConnected',\n                    id: nanoid(),\n                    submittedAt: Date.now(),\n                    address: account,\n                },\n            });\n        }\n    }, [account, chainId]);\n    const addNotification = useCallback(({ notification, chainId }) => {\n        dispatch({\n            type: 'ADD_NOTIFICATION',\n            chainId,\n            notification: Object.assign(Object.assign({}, notification), { id: nanoid() }),\n        });\n    }, [dispatch]);\n    const removeNotification = useCallback(({ notificationId, chainId }) => {\n        dispatch({\n            type: 'REMOVE_NOTIFICATION',\n            chainId,\n            notificationId,\n        });\n    }, [dispatch]);\n    return (_jsx(NotificationsContext.Provider, { value: { addNotification, notifications, removeNotification }, children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}