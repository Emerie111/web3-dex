{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\n\nexport function useRawLogs(filter) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var providers = useReadonlyNetworks();\n\n  var _blockNumber = useBlockNumber();\n\n  var blockNumbers = useBlockNumbers();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      logs = _useState2[0],\n      setLogs = _useState2[1];\n\n  var chainId = queryParams.chainId;\n\n  var _useMemo = useMemo(function () {\n    return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n  }, [providers, library, blockNumbers, _blockNumber, chainId]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      provider = _useMemo2[0],\n      blockNumber = _useMemo2[1];\n\n  function updateLogs() {\n    return _updateLogs.apply(this, arguments);\n  }\n\n  function _updateLogs() {\n    _updateLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setLogs;\n\n              if (filter) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t1 = undefined;\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return provider === null || provider === void 0 ? void 0 : provider.getLogs(filter);\n\n            case 7:\n              _context.t1 = _context.sent;\n\n            case 8:\n              _context.t2 = _context.t1;\n              (0, _context.t0)(_context.t2);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateLogs.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"sources":["../../../../src/hooks/useRawLogs.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAT,EAAoB,OAApB,EAA6B,QAA7B,QAA6C,OAA7C;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,mBAAT,QAAoC,uCAApC;AACA,SAAS,eAAT,EAA0B,cAA1B,QAAgD,UAAhD;AAKA;;;;;;;;AAQG;;AACH,OAAM,SAAU,UAAV,CACJ,MADI,EAEyB;EAAA,IAA7B,WAA6B,uEAAF,EAAE;;EAE7B,iBAAoB,SAAS,EAA7B;EAAA,IAAQ,OAAR,cAAQ,OAAR;;EACA,IAAM,SAAS,GAAG,mBAAmB,EAArC;;EACA,IAAM,YAAY,GAAG,cAAc,EAAnC;;EACA,IAAM,YAAY,GAAG,eAAe,EAApC;;EAEA,gBAAwB,QAAQ,EAAhC;EAAA;EAAA,IAAO,IAAP;EAAA,IAAa,OAAb;;EAEA,IAAQ,OAAR,GAAoB,WAApB,CAAQ,OAAR;;EAEA,eAAgC,OAAO,CACrC;IAAA,OAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAD,CAAV,EAAqB,YAAY,CAAC,OAAD,CAAjC,CAAH,GAAiD,CAAC,OAAD,EAAU,YAAV,CAA/D;EAAA,CADqC,EAErC,CAAC,SAAD,EAAY,OAAZ,EAAqB,YAArB,EAAmC,YAAnC,EAAiD,OAAjD,CAFqC,CAAvC;EAAA;EAAA,IAAO,QAAP;EAAA,IAAiB,WAAjB;;EAX6B,SAgBd,UAhBc;IAAA;EAAA;;EAAA;IAAA,yEAgB7B;MAAA;QAAA;UAAA;YAAA;cAAA,cACE,OADF;;cAAA,IACW,MADX;gBAAA;gBAAA;cAAA;;cAAA,cACoB,SADpB;cAAA;cAAA;;YAAA;cAAA;cAAA,OACsC,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,OAAV,CAAkB,MAAlB,CADtC;;YAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAhB6B;IAAA;EAAA;;EAoB7B,SAAS,CAAC,YAAK;IACb,KAAK,UAAU,EAAf;EACD,CAFQ,EAEN,CAAC,QAAD,EAAW,WAAX,CAFM,CAAT;EAIA,OAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter, queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [logs, setLogs] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber, chainId]);\n    async function updateLogs() {\n        setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n    }\n    useEffect(() => {\n        void updateLogs();\n    }, [provider, blockNumber]);\n    return logs;\n}\n//# sourceMappingURL=useRawLogs.js.map"]},"metadata":{},"sourceType":"module"}