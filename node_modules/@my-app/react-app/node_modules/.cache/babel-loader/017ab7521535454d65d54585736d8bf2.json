{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [].concat(_toConsumableArray(state), _toConsumableArray(action.calls.map(function (call) {\n      return Object.assign(Object.assign({}, call), {\n        address: call.address.toLowerCase()\n      });\n    })));\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(function (call) {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n\n      var blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    var finalState = state;\n\n    var _iterator = _createForOfIteratorHelper(action.calls),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var call = _step.value;\n        var index = finalState.findIndex(function (x) {\n          return x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data;\n        });\n\n        if (index !== -1) {\n          finalState = finalState.filter(function (_, i) {\n            return i !== index;\n          });\n        }\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/callsReducer.ts"],"names":[],"mappings":";;;AA+CA;;AAEG;AACH,OAAM,SAAU,YAAV,GAA4D;EAAA,IAArC,KAAqC,uEAAlB,EAAkB;EAAA,IAAd,MAAc;;EAChE,IAAI,MAAM,CAAC,IAAP,KAAgB,WAApB,EAAiC;IAC/B,oCAAW,KAAX,sBAAqB,MAAM,CAAC,KAAP,CAAa,GAAb,CAAiB,UAAC,IAAD;MAAA,OAAU,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAN,CAAA,EAAU;QAAE,OAAO,EAAE,IAAI,CAAC,OAAL,CAAa,WAAb;MAAX,CAAV,CAAV;IAAA,CAAjB,CAArB;EACD,CAFD,MAEO,IAAI,MAAM,CAAC,IAAP,KAAgB,cAApB,EAAoC;IACzC,OAAO,KAAK,CAAC,GAAN,CAAU,UAAC,IAAD,EAAS;MACxB,IAAI,IAAI,CAAC,OAAL,KAAiB,MAAM,CAAC,OAAxB,IAAmC,CAAC,MAAM,CAAC,YAAP,CAAoB,QAApB,CAA6B,IAA7B,CAAxC,EAA4E;QAC1E,OAAO,IAAP;MACD;;MACD,IAAM,WAAW,GAAG,MAAM,CAAC,WAA3B;MACA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;QAAE,sBAAsB,EAAE;MAA1B,CAAhB,CAAA;IACD,CANM,CAAP;EAOD,CARM,MAQA;IACL,IAAI,UAAU,GAAG,KAAjB;;IADK,2CAEc,MAAM,CAAC,KAFrB;IAAA;;IAAA;MAAA;QAAA,IAEM,IAFN;QAGH,IAAM,KAAK,GAAG,UAAU,CAAC,SAAX,CACZ,UAAC,CAAD;UAAA,OAAO,CAAC,CAAC,OAAF,CAAU,WAAV,OAA4B,IAAI,CAAC,OAAL,CAAa,WAAb,EAA5B,IAA0D,CAAC,CAAC,IAAF,KAAW,IAAI,CAAC,IAAjF;QAAA,CADY,CAAd;;QAGA,IAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;UAChB,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAC,CAAD,EAAI,CAAJ;YAAA,OAAU,CAAC,KAAK,KAAhB;UAAA,CAAlB,CAAb;QACD;MARE;;MAEL,oDAAiC;QAAA;MAOhC;IATI;MAAA;IAAA;MAAA;IAAA;;IAUL,OAAO,UAAP;EACD;AACF","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state = [], action) {\n    if (action.type === 'ADD_CALLS') {\n        return [...state, ...action.calls.map((call) => (Object.assign(Object.assign({}, call), { address: call.address.toLowerCase() })))];\n    }\n    else if (action.type === 'UPDATE_CALLS') {\n        return state.map((call) => {\n            if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n                return call;\n            }\n            const blockNumber = action.blockNumber;\n            return Object.assign(Object.assign({}, call), { lastUpdatedBlockNumber: blockNumber });\n        });\n    }\n    else {\n        let finalState = state;\n        for (const call of action.calls) {\n            const index = finalState.findIndex((x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n            if (index !== -1) {\n                finalState = finalState.filter((_, i) => i !== index);\n            }\n        }\n        return finalState;\n    }\n}\n//# sourceMappingURL=callsReducer.js.map"]},"metadata":{},"sourceType":"module"}