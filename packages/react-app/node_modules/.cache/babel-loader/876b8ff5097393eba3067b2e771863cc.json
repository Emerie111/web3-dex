{"ast":null,"code":"export var DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nvar INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n\n  var number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\n\nfunction formatNumber(options, value) {\n  var integer = getIntegerPart(value, options.decimals);\n  var thousands = splitThousands(integer, options.thousandSeparator);\n  var decimal = getDecimalPart(value, options.decimals);\n  var digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\n\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    var fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\n\nfunction stripFrontZeroes(value) {\n  var stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\n\nfunction splitThousands(value, separator) {\n  var count = value.length / 3;\n  var resultValue = value.split('');\n\n  for (var i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n\n  return resultValue.join('');\n}\n\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\n\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return \"\".concat(integer).concat(separator).concat(decimals);\n  }\n}\n\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  var length = significantDigits - integerLength;\n\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\n\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\n\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}","map":{"version":3,"sources":["../../../../src/model/formatting.ts"],"names":[],"mappings":"AAAA,OAAO,IAAM,eAAe,GAAG;EAC7B,QAAQ,EAAE,CADmB;EAE7B,iBAAiB,EAAE,GAFU;EAG7B,gBAAgB,EAAE,GAHW;EAI7B,iBAAiB,EAAE,QAJU;EAK7B,iBAAiB,EAAE,KALU;EAM7B,oBAAoB,EAAE,CANO;EAO7B,MAAM,EAAE,EAPqB;EAQ7B,MAAM,EAAE;AARqB,CAAxB;AAaP,IAAM,WAAW,GAAG,OAApB;AAEA,OAAM,SAAU,cAAV,CAAyB,OAAzB,EAAyD,KAAzD,EAAsE;EAC1E,IAAI,CAAC,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAAL,EAA8B;IAC5B,MAAM,IAAI,SAAJ,CAAc,yCAAd,CAAN;EACD;;EACD,IAAM,MAAM,GAAG,YAAY,CAAC,OAAD,EAAU,KAAV,CAA3B;EACA,OAAO,CAAC,OAAO,CAAC,MAAT,EAAiB,MAAjB,EAAyB,OAAO,CAAC,MAAjC,EAAyC,IAAzC,CAA8C,EAA9C,CAAP;AACD;;AAED,SAAS,YAAT,CAAsB,OAAtB,EAAsD,KAAtD,EAAmE;EACjE,IAAM,OAAO,GAAG,cAAc,CAAC,KAAD,EAAQ,OAAO,CAAC,QAAhB,CAA9B;EACA,IAAM,SAAS,GAAG,cAAc,CAAC,OAAD,EAAU,OAAO,CAAC,iBAAlB,CAAhC;EACA,IAAM,OAAO,GAAG,cAAc,CAAC,KAAD,EAAQ,OAAO,CAAC,QAAhB,CAA9B;EACA,IAAM,MAAM,GAAG,OAAO,CAAC,iBAAR,GACX,OAAO,CAAC,OAAD,EAAU,OAAO,CAAC,oBAAlB,CADI,GAEX,aAAa,CAAC,OAAD,EAAU,OAAO,CAAC,MAAlB,EAA0B,OAAO,CAAC,iBAAlC,CAFjB;EAGA,OAAO,YAAY,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAAO,CAAC,gBAA5B,CAAnB;AACD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAuC,QAAvC,EAAuD;EACrD,IAAI,KAAK,CAAC,MAAN,IAAgB,QAApB,EAA8B;IAC5B,OAAO,GAAP;EACD,CAFD,MAEO;IACL,IAAM,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,CAAhB,EAAmB,KAAK,CAAC,MAAN,GAAe,QAAlC,CAAjB;IACA,OAAO,gBAAgB,CAAC,QAAD,CAAvB;EACD;AACF;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAAuC;EACrC,IAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAjB;EACA,OAAO,QAAQ,IAAI,GAAnB;AACD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAuC,SAAvC,EAAwD;EACtD,IAAM,KAAK,GAAG,KAAK,CAAC,MAAN,GAAe,CAA7B;EACA,IAAM,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,EAAZ,CAApB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;IAC9B,WAAW,CAAC,MAAZ,CAAmB,CAAC,CAAD,GAAK,CAAL,GAAS,CAA5B,EAA+B,CAA/B,EAAkC,SAAlC;EACD;;EACD,OAAO,WAAW,CAAC,IAAZ,CAAiB,EAAjB,CAAP;AACD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAuC,QAAvC,EAAuD;EACrD,IAAI,KAAK,CAAC,MAAN,IAAgB,QAApB,EAA8B;IAC5B,OAAO,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,GAAzB,CAAP;EACD,CAFD,MAEO;IACL,OAAO,KAAK,CAAC,SAAN,CAAgB,KAAK,CAAC,MAAN,GAAe,QAA/B,CAAP;EACD;AACF;;AAED,SAAS,YAAT,CAAsB,OAAtB,EAAuC,QAAvC,EAAyD,SAAzD,EAA0E;EACxE,IAAI,CAAC,QAAL,EAAe;IACb,OAAO,OAAP;EACD,CAFD,MAEO;IACL,iBAAU,OAAV,SAAoB,SAApB,SAAgC,QAAhC;EACD;AACF;;AAED,SAAS,aAAT,CAAuB,OAAvB,EAAwC,aAAxC,EAA+D,iBAA/D,EAAwF;EACtF,IAAM,MAAM,GAAG,iBAAiB,GAAG,aAAnC;;EACA,IAAI,MAAM,GAAG,OAAO,CAAC,MAArB,EAA6B;IAC3B,OAAO,cAAc,CAAC,OAAD,CAArB;EACD,CAFD,MAEO;IACL,OAAO,cAAc,CAAC,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,MAArB,CAAD,CAArB;EACD;AACF;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAqC;EACnC,OAAO,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAP;AACD;;AAED,SAAS,OAAT,CAAiB,OAAjB,EAAkC,oBAAlC,EAA8D;EAC5D,IAAI,oBAAoB,GAAG,OAAO,CAAC,MAAnC,EAA2C;IACzC,OAAO,OAAO,CAAC,MAAR,CAAe,oBAAf,EAAqC,GAArC,CAAP;EACD,CAFD,MAEO;IACL,OAAO,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,oBAArB,CAAP;EACD;AACF","sourceRoot":"","sourcesContent":["export const DEFAULT_OPTIONS = {\n    decimals: 0,\n    thousandSeparator: ',',\n    decimalSeparator: '.',\n    significantDigits: Infinity,\n    useFixedPrecision: false,\n    fixedPrecisionDigits: 0,\n    prefix: '',\n    suffix: '',\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n    if (!INPUT_REGEX.test(value)) {\n        throw new TypeError('Invalid input, decimal string expected.');\n    }\n    const number = formatNumber(options, value);\n    return [options.prefix, number, options.suffix].join('');\n}\nfunction formatNumber(options, value) {\n    const integer = getIntegerPart(value, options.decimals);\n    const thousands = splitThousands(integer, options.thousandSeparator);\n    const decimal = getDecimalPart(value, options.decimals);\n    const digits = options.useFixedPrecision\n        ? toFixed(decimal, options.fixedPrecisionDigits)\n        : toSignificant(decimal, integer.length, options.significantDigits);\n    return joinDecimals(thousands, digits, options.decimalSeparator);\n}\nfunction getIntegerPart(value, decimals) {\n    if (value.length <= decimals) {\n        return '0';\n    }\n    else {\n        const fragment = value.substring(0, value.length - decimals);\n        return stripFrontZeroes(fragment);\n    }\n}\nfunction stripFrontZeroes(value) {\n    const stripped = value.replace(/^0+/, '');\n    return stripped || '0';\n}\nfunction splitThousands(value, separator) {\n    const count = value.length / 3;\n    const resultValue = value.split('');\n    for (let i = 1; i < count; i++) {\n        resultValue.splice(-4 * i + 1, 0, separator);\n    }\n    return resultValue.join('');\n}\nfunction getDecimalPart(value, decimals) {\n    if (value.length <= decimals) {\n        return value.padStart(decimals, '0');\n    }\n    else {\n        return value.substring(value.length - decimals);\n    }\n}\nfunction joinDecimals(integer, decimals, separator) {\n    if (!decimals) {\n        return integer;\n    }\n    else {\n        return `${integer}${separator}${decimals}`;\n    }\n}\nfunction toSignificant(decimal, integerLength, significantDigits) {\n    const length = significantDigits - integerLength;\n    if (length > decimal.length) {\n        return stripEndZeroes(decimal);\n    }\n    else {\n        return stripEndZeroes(decimal.substring(0, length));\n    }\n}\nfunction stripEndZeroes(value) {\n    return value.replace(/0+$/, '');\n}\nfunction toFixed(decimal, fixedPrecisionDigits) {\n    if (fixedPrecisionDigits > decimal.length) {\n        return decimal.padEnd(fixedPrecisionDigits, '0');\n    }\n    else {\n        return decimal.substring(0, fixedPrecisionDigits);\n    }\n}\n//# sourceMappingURL=formatting.js.map"]},"metadata":{},"sourceType":"module"}