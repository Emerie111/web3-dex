{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\n\nexport function useTransactions() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useEthers = useEthers(),\n      defaultChainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var _useTransactionsConte = useTransactionsContext(),\n      addTransaction = _useTransactionsConte.addTransaction,\n      transactions = _useTransactionsConte.transactions;\n\n  var _chainId = queryParams.chainId;\n  var chainId = useMemo(function () {\n    return _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId;\n  }, [_chainId, defaultChainId]);\n  var filtered = useMemo(function () {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(function (x) {\n      return x.transaction.from === account;\n    });\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction: addTransaction\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useTransactions.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAEA,SAAS,sBAAT,QAAuC,cAAvC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AACH,OAAM,SAAU,eAAV,GAAuD;EAAA,IAA7B,WAA6B,uEAAF,EAAE;;EAC3D,iBAA6C,SAAS,EAAtD;EAAA,IAAiB,cAAjB,cAAQ,OAAR;EAAA,IAAiC,OAAjC,cAAiC,OAAjC;;EACA,4BAAyC,sBAAsB,EAA/D;EAAA,IAAQ,cAAR,yBAAQ,cAAR;EAAA,IAAwB,YAAxB,yBAAwB,YAAxB;;EACA,IAAiB,QAAjB,GAA8B,WAA9B,CAAQ,OAAR;EAEA,IAAM,OAAO,GAAG,OAAO,CAAC;IAAA,OAAM,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,cAAlB;EAAA,CAAD,EAAmC,CAAC,QAAD,EAAW,cAAX,CAAnC,CAAvB;EAEA,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAK;;;IAC5B,IAAI,OAAO,KAAK,SAAZ,IAAyB,CAAC,OAA9B,EAAuC;MACrC,OAAO,EAAP;IACD;;IACD,OAAO,CAAC,CAAA,EAAA,GAAA,YAAY,CAAC,OAAD,CAAZ,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,EAA1B,EAA8B,MAA9B,CAAqC,UAAC,CAAD;MAAA,OAAO,CAAC,CAAC,WAAF,CAAc,IAAd,KAAuB,OAA9B;IAAA,CAArC,CAAP;EACD,CALuB,EAKrB,CAAC,YAAD,EAAe,OAAf,EAAwB,OAAxB,CALqB,CAAxB;EAOA,OAAO;IACL,YAAY,EAAE,QADT;IAEL,cAAc,EAAd;EAFK,CAAP;AAID","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions(queryParams = {}) {\n    const { chainId: defaultChainId, account } = useEthers();\n    const { addTransaction, transactions } = useTransactionsContext();\n    const { chainId: _chainId } = queryParams;\n    const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n    const filtered = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter((x) => x.transaction.from === account);\n    }, [transactions, chainId, account]);\n    return {\n        transactions: filtered,\n        addTransaction,\n    };\n}\n//# sourceMappingURL=useTransactions.js.map"]},"metadata":{},"sourceType":"module"}