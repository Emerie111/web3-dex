{"ast":null,"code":"// number of bytes in the hext string - '0x' at the start doesn't count\n// each two characters are one byte\nexport var buffLength = function buffLength(buf) {\n  return (buf.length - 2) / 2;\n}; // length of the buffer padded to the nearest 32 bytes\n\nexport var bufPaddedLength = function bufPaddedLength(buf) {\n  return Math.ceil(buffLength(buf) / 32) * 32;\n};\nexport var encodeUint = function encodeUint(uint) {\n  return uint.toString(16).padStart(64, '0');\n};\nexport var decodeUint = function decodeUint(buf) {\n  return parseInt(buf, 16);\n}; // word length in characters - 32 bytes = 64 characters\n\nexport var wordLength = 64;\nexport var fail = function fail() {\n  throw new Error('Invalid calldata');\n};","map":{"version":3,"sources":["../../../../src/abi/common.ts"],"names":[],"mappings":"AAAA;AACA;AACA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,GAAD;EAAA,OAAiB,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,IAAmB,CAApC;AAAA,CAAnB,C,CACP;;AACA,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,GAAD;EAAA,OAAiB,IAAI,CAAC,IAAL,CAAU,UAAU,CAAC,GAAD,CAAV,GAAkB,EAA5B,IAAkC,EAAnD;AAAA,CAAxB;AACP,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,IAAD;EAAA,OAAkB,IAAI,CAAC,QAAL,CAAc,EAAd,EAAkB,QAAlB,CAA2B,EAA3B,EAA+B,GAA/B,CAAlB;AAAA,CAAnB;AACP,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,GAAD;EAAA,OAAiB,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAzB;AAAA,CAAnB,C,CACP;;AACA,OAAO,IAAM,UAAU,GAAG,EAAnB;AACP,OAAO,IAAM,IAAI,GAAG,SAAP,IAAO,GAAK;EACvB,MAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,CAFM","sourceRoot":"","sourcesContent":["// number of bytes in the hext string - '0x' at the start doesn't count\n// each two characters are one byte\nexport const buffLength = (buf) => (buf.length - 2) / 2;\n// length of the buffer padded to the nearest 32 bytes\nexport const bufPaddedLength = (buf) => Math.ceil(buffLength(buf) / 32) * 32;\nexport const encodeUint = (uint) => uint.toString(16).padStart(64, '0');\nexport const decodeUint = (buf) => parseInt(buf, 16);\n// word length in characters - 32 bytes = 64 characters\nexport const wordLength = 64;\nexport const fail = () => {\n    throw new Error('Invalid calldata');\n};\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}