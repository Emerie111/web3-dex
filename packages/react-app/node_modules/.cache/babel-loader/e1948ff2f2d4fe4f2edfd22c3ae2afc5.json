{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\n\nfunction getItem(key) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var item = window.localStorage.getItem(key);\n\n  if (item !== null) {\n    try {\n      return JSON.parse(item);\n    } catch (_a) {// ignore error\n    }\n  }\n}\n\nfunction setItem(key, value) {\n  if (value === undefined) {\n    window.localStorage.removeItem(key);\n  } else {\n    var toStore = JSON.stringify(value);\n    window.localStorage.setItem(key, toStore);\n    return JSON.parse(toStore);\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function useLocalStorage(key) {\n  var _useState = useState(function () {\n    return getItem(key);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  useEffect(function () {\n    setValue(getItem(key));\n  }, [key]);\n  useEffect(function () {\n    setItem(key, value);\n  }, [value]); // As value updating relies on useEffect, it takes mutliple rerenders to fully update the value.\n  // The third elemnt in the return array allows to get the immediate value stored in the localStorage.\n\n  return [value, setValue, function () {\n    return getItem(key);\n  }];\n}","map":{"version":3,"sources":["../../../../src/hooks/useLocalStorage.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;;AAEA,SAAS,OAAT,CAAiB,GAAjB,EAA4B;EAC1B,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;IACjC,OAAO,IAAP;EACD;;EAED,IAAM,IAAI,GAAG,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,GAA5B,CAAb;;EACA,IAAI,IAAI,KAAK,IAAb,EAAmB;IACjB,IAAI;MACF,OAAO,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;IACD,CAFD,CAEE,OAAA,EAAA,EAAM,CACN;IACD;EACF;AACF;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAA8B,KAA9B,EAAwC;EACtC,IAAI,KAAK,KAAK,SAAd,EAAyB;IACvB,MAAM,CAAC,YAAP,CAAoB,UAApB,CAA+B,GAA/B;EACD,CAFD,MAEO;IACL,IAAM,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAhB;IACA,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,GAA5B,EAAiC,OAAjC;IACA,OAAO,IAAI,CAAC,KAAL,CAAW,OAAX,CAAP;EACD;AACF;AAED;;AAEG;;;AACH,OAAM,SAAU,eAAV,CAA0B,GAA1B,EAAqC;EACzC,gBAA0B,QAAQ,CAAC;IAAA,OAAM,OAAO,CAAC,GAAD,CAAb;EAAA,CAAD,CAAlC;EAAA;EAAA,IAAO,KAAP;EAAA,IAAc,QAAd;;EAEA,SAAS,CAAC,YAAK;IACb,QAAQ,CAAC,OAAO,CAAC,GAAD,CAAR,CAAR;EACD,CAFQ,EAEN,CAAC,GAAD,CAFM,CAAT;EAIA,SAAS,CAAC,YAAK;IACb,OAAO,CAAC,GAAD,EAAM,KAAN,CAAP;EACD,CAFQ,EAEN,CAAC,KAAD,CAFM,CAAT,CAPyC,CAWzC;EACA;;EACA,OAAO,CAAC,KAAD,EAAQ,QAAR,EAAkB;IAAA,OAAM,OAAO,CAAC,GAAD,CAAb;EAAA,CAAlB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nfunction getItem(key) {\n    if (typeof window === 'undefined') {\n        return null;\n    }\n    const item = window.localStorage.getItem(key);\n    if (item !== null) {\n        try {\n            return JSON.parse(item);\n        }\n        catch (_a) {\n            // ignore error\n        }\n    }\n}\nfunction setItem(key, value) {\n    if (value === undefined) {\n        window.localStorage.removeItem(key);\n    }\n    else {\n        const toStore = JSON.stringify(value);\n        window.localStorage.setItem(key, toStore);\n        return JSON.parse(toStore);\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n    const [value, setValue] = useState(() => getItem(key));\n    useEffect(() => {\n        setValue(getItem(key));\n    }, [key]);\n    useEffect(() => {\n        setItem(key, value);\n    }, [value]);\n    // As value updating relies on useEffect, it takes mutliple rerenders to fully update the value.\n    // The third elemnt in the return array allows to get the immediate value stored in the localStorage.\n    return [value, setValue, () => getItem(key)];\n}\n//# sourceMappingURL=useLocalStorage.js.map"]},"metadata":{},"sourceType":"module"}