{"ast":null,"code":"import { utils } from 'ethers';\nimport MultiCall from './MultiCall.json';\nimport MultiCall2 from './MultiCall2.json';\nimport ERC20 from './ERC20.json';\nimport ERC20Mock from './ERC20Mock.json';\nimport BlockNumberContract from './BlockNumber.json';\nvar Interface = utils.Interface;\nvar MultiCallABI = new Interface(MultiCall.abi);\nexport { MultiCall, MultiCallABI };\nvar MultiCall2ABI = new Interface(MultiCall2.abi);\nexport { MultiCall2, MultiCall2ABI };\nvar ERC20Interface = new Interface(ERC20.abi);\nexport { ERC20, ERC20Interface };\nvar ERC20MockInterface = new Interface(ERC20Mock.abi);\nexport { ERC20Mock, ERC20MockInterface };\nexport { BlockNumberContract };\nexport * from './doubler';\nexport * from './timestamp';\nexport * from './reverter';","map":{"version":3,"sources":["../../../../../src/constants/abi/index.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,QAAtB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,OAAO,UAAP,MAAuB,mBAAvB;AACA,OAAO,KAAP,MAAkB,cAAlB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,OAAO,mBAAP,MAAgC,oBAAhC;AAEA,IAAM,SAAS,GAAG,KAAK,CAAC,SAAxB;AAEA,IAAM,YAAY,GAAG,IAAI,SAAJ,CAAc,SAAS,CAAC,GAAxB,CAArB;AAEA,SAAS,SAAT,EAAoB,YAApB;AAEA,IAAM,aAAa,GAAG,IAAI,SAAJ,CAAc,UAAU,CAAC,GAAzB,CAAtB;AAEA,SAAS,UAAT,EAAqB,aAArB;AAEA,IAAM,cAAc,GAAG,IAAI,SAAJ,CAAc,KAAK,CAAC,GAApB,CAAvB;AAEA,SAAS,KAAT,EAAgB,cAAhB;AAEA,IAAM,kBAAkB,GAAG,IAAI,SAAJ,CAAc,SAAS,CAAC,GAAxB,CAA3B;AAEA,SAAS,SAAT,EAAoB,kBAApB;AAEA,SAAS,mBAAT;AAEA,cAAc,WAAd;AACA,cAAc,aAAd;AACA,cAAc,YAAd","sourceRoot":"","sourcesContent":["import { utils } from 'ethers';\nimport MultiCall from './MultiCall.json';\nimport MultiCall2 from './MultiCall2.json';\nimport ERC20 from './ERC20.json';\nimport ERC20Mock from './ERC20Mock.json';\nimport BlockNumberContract from './BlockNumber.json';\nconst Interface = utils.Interface;\nconst MultiCallABI = new Interface(MultiCall.abi);\nexport { MultiCall, MultiCallABI };\nconst MultiCall2ABI = new Interface(MultiCall2.abi);\nexport { MultiCall2, MultiCall2ABI };\nconst ERC20Interface = new Interface(ERC20.abi);\nexport { ERC20, ERC20Interface };\nconst ERC20MockInterface = new Interface(ERC20Mock.abi);\nexport { ERC20Mock, ERC20MockInterface };\nexport { BlockNumberContract };\nexport * from './doubler';\nexport * from './timestamp';\nexport * from './reverter';\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}