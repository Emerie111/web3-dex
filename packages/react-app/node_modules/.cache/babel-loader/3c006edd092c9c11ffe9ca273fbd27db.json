{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nvar ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\n\nexport var multicall2Factory = function multicall2Factory(fastEncoding) {\n  return fastEncoding ? fastEncodingMulticall2 : multicall2;\n};\n/**\n * @public\n */\n\nexport function multicall2(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n/**\n * @public\n */\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider, address, blockNumber, requests) {\n    var contract, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.tryAggregate(false, requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            results = _context.sent;\n            return _context.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}\n\nexport function fastEncodingMulticall2(_x5, _x6, _x7, _x8) {\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction _fastEncodingMulticall() {\n  _fastEncodingMulticall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider, address, blockNumber, requests) {\n    var response, _decodeTryAggregate, _decodeTryAggregate2, results;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {});\n\n          case 2:\n            _context2.next = 4;\n            return provider.call({\n              to: address,\n              data: encodeTryAggregate(false, requests.map(function (_ref2) {\n                var address = _ref2.address,\n                    data = _ref2.data;\n                return [address, data];\n              }))\n            }, blockNumber);\n\n          case 4:\n            response = _context2.sent;\n            _decodeTryAggregate = decodeTryAggregate(response), _decodeTryAggregate2 = _slicedToArray(_decodeTryAggregate, 1), results = _decodeTryAggregate2[0];\n            return _context2.abrupt(\"return\", decodeResult(results, requests));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fastEncodingMulticall.apply(this, arguments);\n}\n\nfunction decodeResult(results, requests) {\n  var _a;\n\n  var state = {};\n\n  for (var i = 0; i < requests.length; i++) {\n    var _requests$i = requests[i],\n        address = _requests$i.address,\n        data = _requests$i.data;\n\n    var _results$i = _slicedToArray(results[i], 2),\n        success = _results$i[0],\n        value = _results$i[1];\n\n    var stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success: success,\n      value: value\n    };\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall2.ts"],"names":[],"mappings":";;;AAAA,SAAS,QAAT,QAAoC,QAApC;AACA,SAAS,kBAAT,EAA6B,kBAA7B,QAAuD,yBAAvD;AAIA,IAAM,GAAG,GAAG,CACV,yJADU,CAAZ;AAIA;;AAEG;;AACH,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,YAAD;EAAA,OAA4B,YAAY,GAAG,sBAAH,GAA4B,UAApE;AAAA,CAA1B;AAEP;;AAEG;;AACH,gBAAsB,UAAtB;EAAA;AAAA;AAkBA;;AAEG;;;0EApBI,iBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,iCAOI,EAPJ;;UAAA;YASC,QATD,GASY,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CATZ;YAAA;YAAA,OAUsC,QAAQ,CAAC,YAAT,CACzC,KADyC,EAEzC,QAAQ,CAAC,GAAT,CAAa;cAAA,IAAG,OAAH,QAAG,OAAH;cAAA,IAAY,IAAZ,QAAY,IAAZ;cAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;YAAA,CAAb,CAFyC,EAGzC;cAAE,QAAQ,EAAE;YAAZ,CAHyC,CAVtC;;UAAA;YAUC,OAVD;YAAA,iCAeE,YAAY,CAAC,OAAD,EAAU,QAAV,CAfd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAqBP,gBAAsB,sBAAtB;EAAA;AAAA;;;sFAAO,kBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;cAAA;cAAA;YAAA;;YAAA,kCAOI,EAPJ;;UAAA;YAAA;YAAA,OASkB,QAAQ,CAAC,IAAT,CACrB;cACE,EAAE,EAAE,OADN;cAEE,IAAI,EAAE,kBAAkB,CACtB,KADsB,EAEtB,QAAQ,CAAC,GAAT,CAAa;gBAAA,IAAG,OAAH,SAAG,OAAH;gBAAA,IAAY,IAAZ,SAAY,IAAZ;gBAAA,OAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;cAAA,CAAb,CAFsB;YAF1B,CADqB,EAQrB,WARqB,CATlB;;UAAA;YASC,QATD;YAAA,sBAmBa,kBAAkB,CAAC,QAAD,CAnB/B,iEAmBE,OAnBF;YAAA,kCAoBE,YAAY,CAAC,OAAD,EAAU,QAAV,CApBd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAuBP,SAAS,YAAT,CAAsB,OAAtB,EAAoD,QAApD,EAAuE;;;EACrE,IAAM,KAAK,GAAe,EAA1B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;IACxC,kBAA0B,QAAQ,CAAC,CAAD,CAAlC;IAAA,IAAQ,OAAR,eAAQ,OAAR;IAAA,IAAiB,IAAjB,eAAiB,IAAjB;;IACA,gCAAyB,OAAO,CAAC,CAAD,CAAhC;IAAA,IAAO,OAAP;IAAA,IAAgB,KAAhB;;IACA,IAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAD,CAAL,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,EAA1C;IACA,eAAe,CAAC,IAAD,CAAf,GAAwB;MAAE,OAAO,EAAP,OAAF;MAAW,KAAK,EAAL;IAAX,CAAxB;IACA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;EACD;;EACD,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = [\n    'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n];\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall2 : multicall2);\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const results = await contract.tryAggregate(false, requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeTryAggregate(false, requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [results] = decodeTryAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const [success, value] = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { success, value };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall2.js.map"]},"metadata":{},"sourceType":"module"}