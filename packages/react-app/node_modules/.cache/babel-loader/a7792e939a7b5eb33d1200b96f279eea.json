{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/HP 250 G1/web3-dex/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\n\nexport function useLookupAddress(address) {\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      ens = _useState2[0],\n      setENS = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    var mounted = true;\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var resolved;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!library || !address)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.prev = 2;\n              setIsLoading(true);\n              _context.next = 6;\n              return library.lookupAddress(address);\n\n            case 6:\n              resolved = _context.sent;\n\n              if (mounted) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 9:\n              setENS(resolved);\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n\n              if (mounted) {\n                _context.next = 16;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 16:\n              setError(_context.t0);\n\n            case 17:\n              _context.prev = 17;\n              setIsLoading(false);\n              return _context.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12, 17, 20]]);\n    }))();\n    return function () {\n      mounted = false;\n    };\n  }, [address, library]);\n  return {\n    ens: ens,\n    isLoading: isLoading,\n    error: error\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useLookupAddress.ts"],"names":[],"mappings":";;;AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,gBAAV,CAA2B,OAA3B,EAAsD;EAC1D,iBAAoB,SAAS,EAA7B;EAAA,IAAQ,OAAR,cAAQ,OAAR;;EACA,gBAAsB,QAAQ,EAA9B;EAAA;EAAA,IAAO,GAAP;EAAA,IAAY,MAAZ;;EACA,iBAAkC,QAAQ,CAAC,KAAD,CAA1C;EAAA;EAAA,IAAO,SAAP;EAAA,IAAkB,YAAlB;;EACA,iBAA0B,QAAQ,CAAe,IAAf,CAAlC;EAAA;EAAA,IAAO,KAAP;EAAA,IAAc,QAAd;;EAEA,SAAS,CAAC,YAAK;IACb,IAAI,OAAO,GAAG,IAAd;IAEA,KAAK,2DAAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MACA,CAAC,OAAD,IAAY,CAAC,OADb;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;cAGF,YAAY,CAAC,IAAD,CAAZ;cAHE;cAAA,OAIqB,OAAO,CAAC,aAAR,CAAsB,OAAtB,CAJrB;;YAAA;cAII,QAJJ;;cAAA,IAKG,OALH;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAMF,MAAM,CAAC,QAAD,CAAN;cANE;cAAA;;YAAA;cAAA;cAAA;;cAAA,IAQG,OARH;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cASF,QAAQ,aAAR;;YATE;cAAA;cAWF,YAAY,CAAC,KAAD,CAAZ;cAXE;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD,IAAL;IAeA,OAAO,YAAK;MACV,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CArBQ,EAqBN,CAAC,OAAD,EAAU,OAAV,CArBM,CAAT;EAuBA,OAAO;IAAE,GAAG,EAAH,GAAF;IAAO,SAAS,EAAT,SAAP;IAAkB,KAAK,EAAL;EAAlB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * `useLookupAddress` is a hook that is used to retrieve the ENS (e.g. `name.eth`) for a specific address.\n * @param address address to lookup\n * @returns {} Object with the following:\n  - `ens: string | null | undefined` - ENS name of the account or null if not found.\n  - `isLoading: boolean` - indicates whether the lookup is in progress.\n  - `error: Error | null` - error that occurred during the lookup or null if no error occurred.\n * @public\n * @example\n * const { account } = useEthers()\n * const { ens } = useLookupAddress(account)\n *\n * return (\n *   <p>Account: {ens ?? account}</p>\n * )\n */\nexport function useLookupAddress(address) {\n    const { library } = useEthers();\n    const [ens, setENS] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        let mounted = true;\n        void (async () => {\n            if (!library || !address)\n                return;\n            try {\n                setIsLoading(true);\n                const resolved = await library.lookupAddress(address);\n                if (!mounted)\n                    return;\n                setENS(resolved);\n            }\n            catch (e) {\n                if (!mounted)\n                    return;\n                setError(e);\n            }\n            finally {\n                setIsLoading(false);\n            }\n        })();\n        return () => {\n            mounted = false;\n        };\n    }, [address, library]);\n    return { ens, isLoading, error };\n}\n//# sourceMappingURL=useLookupAddress.js.map"]},"metadata":{},"sourceType":"module"}