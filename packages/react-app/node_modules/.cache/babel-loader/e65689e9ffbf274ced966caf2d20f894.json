{"ast":null,"code":"import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n  if (uniqueCalls.length === 0) {\n    return;\n  }\n\n  var start = Date.now();\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then(function (state) {\n    dispatchState({\n      type: 'FETCH_SUCCESS',\n      blockNumber: blockNumber,\n      chainId: chainId,\n      state: state\n    });\n    notifyDevtools({\n      type: 'MULTICALL_SUCCESS',\n      duration: Date.now() - start,\n      chainId: chainId,\n      blockNumber: blockNumber,\n      multicallAddress: multicallAddress,\n      state: state\n    });\n  }).catch(function (error) {\n    reportError(error);\n    dispatchState({\n      type: 'FETCH_ERROR',\n      blockNumber: blockNumber,\n      chainId: chainId,\n      error: error\n    });\n    notifyDevtools({\n      type: 'MULTICALL_ERROR',\n      duration: Date.now() - start,\n      chainId: chainId,\n      blockNumber: blockNumber,\n      multicallAddress: multicallAddress,\n      calls: uniqueCalls,\n      error: error\n    });\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/performMulticall.ts"],"names":[],"mappings":"AAKA,SAAS,cAAT,QAA+B,gBAA/B;AAEA,OAAM,SAAU,gBAAV,CACJ,QADI,EAEJ,iBAFI,EAQJ,gBARI,EASJ,WATI,EAUJ,WAVI,EAWJ,aAXI,EAYJ,OAZI,EAaJ,WAbI,EAa+B;EAEnC,IAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;IAC5B;EACD;;EAED,IAAM,KAAK,GAAG,IAAI,CAAC,GAAL,EAAd;EACA,iBAAiB,CAAC,QAAD,EAAW,gBAAX,EAA6B,WAA7B,EAA0C,WAA1C,CAAjB,CACG,IADH,CACQ,UAAC,KAAD,EAAU;IACd,aAAa,CAAC;MAAE,IAAI,EAAE,eAAR;MAAyB,WAAW,EAAX,WAAzB;MAAsC,OAAO,EAAP,OAAtC;MAA+C,KAAK,EAAL;IAA/C,CAAD,CAAb;IACA,cAAc,CAAC;MACb,IAAI,EAAE,mBADO;MAEb,QAAQ,EAAE,IAAI,CAAC,GAAL,KAAa,KAFV;MAGb,OAAO,EAAP,OAHa;MAIb,WAAW,EAAX,WAJa;MAKb,gBAAgB,EAAhB,gBALa;MAMb,KAAK,EAAL;IANa,CAAD,CAAd;EAQD,CAXH,EAYG,KAZH,CAYS,UAAC,KAAD,EAAU;IACf,WAAW,CAAC,KAAD,CAAX;IACA,aAAa,CAAC;MAAE,IAAI,EAAE,aAAR;MAAuB,WAAW,EAAX,WAAvB;MAAoC,OAAO,EAAP,OAApC;MAA6C,KAAK,EAAL;IAA7C,CAAD,CAAb;IACA,cAAc,CAAC;MACb,IAAI,EAAE,iBADO;MAEb,QAAQ,EAAE,IAAI,CAAC,GAAL,KAAa,KAFV;MAGb,OAAO,EAAP,OAHa;MAIb,WAAW,EAAX,WAJa;MAKb,gBAAgB,EAAhB,gBALa;MAMb,KAAK,EAAE,WANM;MAOb,KAAK,EAAL;IAPa,CAAD,CAAd;EASD,CAxBH;AAyBD","sourceRoot":"","sourcesContent":["import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n    if (uniqueCalls.length === 0) {\n        return;\n    }\n    const start = Date.now();\n    multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\n        .then((state) => {\n        dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state });\n        notifyDevtools({\n            type: 'MULTICALL_SUCCESS',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            state,\n        });\n    })\n        .catch((error) => {\n        reportError(error);\n        dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error });\n        notifyDevtools({\n            type: 'MULTICALL_ERROR',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            calls: uniqueCalls,\n            error,\n        });\n    });\n}\n//# sourceMappingURL=performMulticall.js.map"]},"metadata":{},"sourceType":"module"}